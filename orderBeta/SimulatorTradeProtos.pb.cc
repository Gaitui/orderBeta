// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimulatorTradeProtos.proto

#include "SimulatorTradeProtos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace tutorial {
class SimulatorTradeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorTradeReply> _instance;
} _SimulatorTradeReply_default_instance_;
class SimulatorTradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulatorTradeOrder> _instance;
} _SimulatorTradeOrder_default_instance_;
}  // namespace tutorial
static void InitDefaultsscc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_SimulatorTradeOrder_default_instance_;
    new (ptr) ::tutorial::SimulatorTradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::SimulatorTradeOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto}, {}};

static void InitDefaultsscc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tutorial::_SimulatorTradeReply_default_instance_;
    new (ptr) ::tutorial::SimulatorTradeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tutorial::SimulatorTradeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SimulatorTradeProtos_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SimulatorTradeProtos_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SimulatorTradeProtos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SimulatorTradeProtos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, transacttime_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, side_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, symbol_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, orderqty_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, price_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, ordertype_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, tseordertype_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, orderid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, nid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, leavesqty_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, orderstatus_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, statuscode_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, text_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, reportseq_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, market_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeReply, execid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, transacttime_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, side_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, orderqty_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, price_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, tseordertype_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, nid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, market_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::SimulatorTradeOrder, kind_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tutorial::SimulatorTradeReply)},
  { 22, -1, sizeof(::tutorial::SimulatorTradeOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_SimulatorTradeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_SimulatorTradeOrder_default_instance_),
};

const char descriptor_table_protodef_SimulatorTradeProtos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032SimulatorTradeProtos.proto\022\010tutorial\"\274"
  "\003\n\023SimulatorTradeReply\022\024\n\014TransactTime\030\001"
  " \001(\t\022 \n\004Side\030\002 \001(\0162\022.tutorial.SideEnum\022\016"
  "\n\006Symbol\030\003 \001(\t\022\020\n\010OrderQty\030\004 \001(\005\022\r\n\005Pric"
  "e\030\005 \001(\001\022*\n\tOrderType\030\006 \001(\0162\027.tutorial.Or"
  "derTypeEnum\022\024\n\014TSEOrderType\030\007 \001(\t\022.\n\013Tim"
  "eInForce\030\010 \001(\0162\031.tutorial.TimeInForceEnu"
  "m\022\017\n\007OrderID\030\t \001(\t\022\013\n\003NID\030\n \001(\003\022\021\n\tLeave"
  "sQty\030\013 \001(\005\022.\n\013OrderStatus\030\014 \001(\0162\031.tutori"
  "al.OrderStatusEnum\022\022\n\nStatusCode\030\r \001(\t\022\014"
  "\n\004Text\030\016 \001(\t\022\021\n\tReportSeq\030\017 \001(\005\022$\n\006Marke"
  "t\030\020 \001(\0162\024.tutorial.MarketEnum\022\016\n\006ExecID\030"
  "\021 \001(\t\"\326\002\n\023SimulatorTradeOrder\022\024\n\014Transac"
  "tTime\030\001 \001(\t\022 \n\004Side\030\002 \001(\0162\022.tutorial.Sid"
  "eEnum\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010OrderQty\030\004 \001(\005\022"
  "\r\n\005Price\030\005 \001(\001\022*\n\tOrderType\030\006 \001(\0162\027.tuto"
  "rial.OrderTypeEnum\022\024\n\014TSEOrderType\030\007 \001(\t"
  "\022.\n\013TimeInForce\030\010 \001(\0162\031.tutorial.TimeInF"
  "orceEnum\022\013\n\003NID\030\t \001(\003\022$\n\006Market\030\n \001(\0162\024."
  "tutorial.MarketEnum\022\017\n\007OrderID\030\013 \001(\t\022 \n\004"
  "Kind\030\014 \001(\0162\022.tutorial.KindEnum*/\n\010KindEn"
  "um\022\010\n\004kNew\020\000\022\013\n\007kCancel\020\001\022\014\n\010kReplace\020\002*"
  "*\n\010SideEnum\022\t\n\005sNone\020\000\022\010\n\004sBuy\020\001\022\t\n\005sSel"
  "l\020\002*o\n\rOrderTypeEnum\022\n\n\006otNone\020\000\022\014\n\010otMa"
  "rket\020\001\022\013\n\007otLimit\020\002\022\032\n\026otMarketWithProte"
  "ction\020\003\022\n\n\006otStop\020\004\022\017\n\013otStopLimit\020\005*\366\001\n"
  "\017OrderStatusEnum\022\n\n\006osNone\020\000\022\020\n\014osPendin"
  "gNew\020\001\022\t\n\005osNew\020\002\022\024\n\020osPendingReplace\020\003\022"
  "\016\n\nosReplaced\020\004\022\023\n\017osPendingCancel\020\005\022\016\n\n"
  "osCanceled\020\006\022\025\n\021osPartiallyFilled\020\007\022\014\n\010o"
  "sFilled\020\010\022\021\n\rosQuoteAccept\020\t\022\r\n\tosExpire"
  "d\020\n\022\016\n\nosRejected\020\013\022\030\n\024osQuoteRequestAcc"
  "ept\020\014*O\n\017TimeInForceEnum\022\013\n\007tifNone\020\000\022\n\n"
  "\006tifROD\020\001\022\n\n\006tifIOC\020\002\022\n\n\006tifFOK\020\003\022\013\n\007tif"
  "TFXQ\020\010*\311\001\n\nMarketEnum\022\t\n\005mNone\020\000\022\014\n\010mFut"
  "ures\020\001\022\014\n\010mOptions\020\002\022\010\n\004mTSE\020\003\022\010\n\004mOTC\020\004"
  "\022\023\n\017mForeignFutures\020\005\022\023\n\017mForeignOptions"
  "\020\006\022\021\n\rmForeignStock\020\007\022\016\n\nmCNFutures\020\010\022\016\n"
  "\nmCNOptions\020\t\022\007\n\003mES\020\n\022\014\n\010mTSE_ODD\020\013\022\014\n\010"
  "mOTC_ODD\020\014B\021\252\002\016SimulatorTradeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SimulatorTradeProtos_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SimulatorTradeProtos_2eproto_sccs[2] = {
  &scc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto.base,
  &scc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SimulatorTradeProtos_2eproto_once;
static bool descriptor_table_SimulatorTradeProtos_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SimulatorTradeProtos_2eproto = {
  &descriptor_table_SimulatorTradeProtos_2eproto_initialized, descriptor_table_protodef_SimulatorTradeProtos_2eproto, "SimulatorTradeProtos.proto", 1597,
  &descriptor_table_SimulatorTradeProtos_2eproto_once, descriptor_table_SimulatorTradeProtos_2eproto_sccs, descriptor_table_SimulatorTradeProtos_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_SimulatorTradeProtos_2eproto::offsets,
  file_level_metadata_SimulatorTradeProtos_2eproto, 2, file_level_enum_descriptors_SimulatorTradeProtos_2eproto, file_level_service_descriptors_SimulatorTradeProtos_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SimulatorTradeProtos_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto), true);
namespace tutorial {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KindEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[0];
}
bool KindEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SideEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[1];
}
bool SideEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[2];
}
bool OrderTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[3];
}
bool OrderStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForceEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[4];
}
bool TimeInForceEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SimulatorTradeProtos_2eproto);
  return file_level_enum_descriptors_SimulatorTradeProtos_2eproto[5];
}
bool MarketEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SimulatorTradeReply::InitAsDefaultInstance() {
}
class SimulatorTradeReply::_Internal {
 public:
};

SimulatorTradeReply::SimulatorTradeReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.SimulatorTradeReply)
}
SimulatorTradeReply::SimulatorTradeReply(const SimulatorTradeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transacttime().empty()) {
    transacttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transacttime_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tseordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tseordertype().empty()) {
    tseordertype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tseordertype_);
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  statuscode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statuscode().empty()) {
    statuscode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.statuscode_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_execid().empty()) {
    execid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.execid_);
  }
  ::memcpy(&side_, &from.side_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_) -
    reinterpret_cast<char*>(&side_)) + sizeof(market_));
  // @@protoc_insertion_point(copy_constructor:tutorial.SimulatorTradeReply)
}

void SimulatorTradeReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto.base);
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statuscode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&side_)) + sizeof(market_));
}

SimulatorTradeReply::~SimulatorTradeReply() {
  // @@protoc_insertion_point(destructor:tutorial.SimulatorTradeReply)
  SharedDtor();
}

void SimulatorTradeReply::SharedDtor() {
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statuscode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulatorTradeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorTradeReply& SimulatorTradeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorTradeReply_SimulatorTradeProtos_2eproto.base);
  return *internal_default_instance();
}


void SimulatorTradeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.SimulatorTradeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transacttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statuscode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_) -
      reinterpret_cast<char*>(&side_)) + sizeof(market_));
  _internal_metadata_.Clear();
}

const char* SimulatorTradeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string TransactTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.TransactTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.SideEnum Side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::tutorial::SideEnum>(val));
        } else goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.Symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OrderQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tutorial.OrderTypeEnum OrderType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::tutorial::OrderTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // string TSEOrderType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tseordertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.TSEOrderType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.TimeInForceEnum TimeInForce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::tutorial::TimeInForceEnum>(val));
        } else goto handle_unusual;
        continue;
      // string OrderID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.OrderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 NID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LeavesQty = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          leavesqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.OrderStatusEnum OrderStatus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_orderstatus(static_cast<::tutorial::OrderStatusEnum>(val));
        } else goto handle_unusual;
        continue;
      // string StatusCode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_statuscode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.StatusCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Text = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.Text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ReportSeq = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          reportseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.MarketEnum Market = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_market(static_cast<::tutorial::MarketEnum>(val));
        } else goto handle_unusual;
        continue;
      // string ExecID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_execid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeReply.ExecID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorTradeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.SimulatorTradeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string TransactTime = 1;
  if (this->transacttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.TransactTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transacttime(), target);
  }

  // .tutorial.SideEnum Side = 2;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.Symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int32 OrderQty = 4;
  if (this->orderqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_orderqty(), target);
  }

  // double Price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // .tutorial.OrderTypeEnum OrderType = 6;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ordertype(), target);
  }

  // string TSEOrderType = 7;
  if (this->tseordertype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tseordertype().data(), static_cast<int>(this->_internal_tseordertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.TSEOrderType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tseordertype(), target);
  }

  // .tutorial.TimeInForceEnum TimeInForce = 8;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_timeinforce(), target);
  }

  // string OrderID = 9;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.OrderID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_orderid(), target);
  }

  // int64 NID = 10;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_nid(), target);
  }

  // int32 LeavesQty = 11;
  if (this->leavesqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_leavesqty(), target);
  }

  // .tutorial.OrderStatusEnum OrderStatus = 12;
  if (this->orderstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_orderstatus(), target);
  }

  // string StatusCode = 13;
  if (this->statuscode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statuscode().data(), static_cast<int>(this->_internal_statuscode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.StatusCode");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_statuscode(), target);
  }

  // string Text = 14;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.Text");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_text(), target);
  }

  // int32 ReportSeq = 15;
  if (this->reportseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_reportseq(), target);
  }

  // .tutorial.MarketEnum Market = 16;
  if (this->market() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_market(), target);
  }

  // string ExecID = 17;
  if (this->execid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execid().data(), static_cast<int>(this->_internal_execid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeReply.ExecID");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_execid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.SimulatorTradeReply)
  return target;
}

size_t SimulatorTradeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.SimulatorTradeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TransactTime = 1;
  if (this->transacttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string TSEOrderType = 7;
  if (this->tseordertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tseordertype());
  }

  // string OrderID = 9;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string StatusCode = 13;
  if (this->statuscode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statuscode());
  }

  // string Text = 14;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string ExecID = 17;
  if (this->execid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());
  }

  // .tutorial.SideEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // int32 OrderQty = 4;
  if (this->orderqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderqty());
  }

  // double Price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // .tutorial.OrderTypeEnum OrderType = 6;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  // .tutorial.TimeInForceEnum TimeInForce = 8;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // int64 NID = 10;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nid());
  }

  // int32 LeavesQty = 11;
  if (this->leavesqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leavesqty());
  }

  // .tutorial.OrderStatusEnum OrderStatus = 12;
  if (this->orderstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orderstatus());
  }

  // int32 ReportSeq = 15;
  if (this->reportseq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reportseq());
  }

  // .tutorial.MarketEnum Market = 16;
  if (this->market() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_market());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorTradeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.SimulatorTradeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorTradeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorTradeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.SimulatorTradeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.SimulatorTradeReply)
    MergeFrom(*source);
  }
}

void SimulatorTradeReply::MergeFrom(const SimulatorTradeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.SimulatorTradeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transacttime().size() > 0) {

    transacttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transacttime_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tseordertype().size() > 0) {

    tseordertype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tseordertype_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.statuscode().size() > 0) {

    statuscode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.statuscode_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.execid().size() > 0) {

    execid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.execid_);
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.orderqty() != 0) {
    _internal_set_orderqty(from._internal_orderqty());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.leavesqty() != 0) {
    _internal_set_leavesqty(from._internal_leavesqty());
  }
  if (from.orderstatus() != 0) {
    _internal_set_orderstatus(from._internal_orderstatus());
  }
  if (from.reportseq() != 0) {
    _internal_set_reportseq(from._internal_reportseq());
  }
  if (from.market() != 0) {
    _internal_set_market(from._internal_market());
  }
}

void SimulatorTradeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.SimulatorTradeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorTradeReply::CopyFrom(const SimulatorTradeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.SimulatorTradeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorTradeReply::IsInitialized() const {
  return true;
}

void SimulatorTradeReply::InternalSwap(SimulatorTradeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tseordertype_.Swap(&other->tseordertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  statuscode_.Swap(&other->statuscode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  execid_.Swap(&other->execid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(side_, other->side_);
  swap(orderqty_, other->orderqty_);
  swap(price_, other->price_);
  swap(ordertype_, other->ordertype_);
  swap(timeinforce_, other->timeinforce_);
  swap(nid_, other->nid_);
  swap(leavesqty_, other->leavesqty_);
  swap(orderstatus_, other->orderstatus_);
  swap(reportseq_, other->reportseq_);
  swap(market_, other->market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorTradeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulatorTradeOrder::InitAsDefaultInstance() {
}
class SimulatorTradeOrder::_Internal {
 public:
};

SimulatorTradeOrder::SimulatorTradeOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.SimulatorTradeOrder)
}
SimulatorTradeOrder::SimulatorTradeOrder(const SimulatorTradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transacttime().empty()) {
    transacttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transacttime_);
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  tseordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tseordertype().empty()) {
    tseordertype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tseordertype_);
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  ::memcpy(&side_, &from.side_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&side_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:tutorial.SimulatorTradeOrder)
}

void SimulatorTradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto.base);
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&side_)) + sizeof(kind_));
}

SimulatorTradeOrder::~SimulatorTradeOrder() {
  // @@protoc_insertion_point(destructor:tutorial.SimulatorTradeOrder)
  SharedDtor();
}

void SimulatorTradeOrder::SharedDtor() {
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulatorTradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulatorTradeOrder& SimulatorTradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulatorTradeOrder_SimulatorTradeProtos_2eproto.base);
  return *internal_default_instance();
}


void SimulatorTradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.SimulatorTradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transacttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tseordertype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&side_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* SimulatorTradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string TransactTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeOrder.TransactTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.SideEnum Side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::tutorial::SideEnum>(val));
        } else goto handle_unusual;
        continue;
      // string Symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeOrder.Symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OrderQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tutorial.OrderTypeEnum OrderType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::tutorial::OrderTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // string TSEOrderType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tseordertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeOrder.TSEOrderType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.TimeInForceEnum TimeInForce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::tutorial::TimeInForceEnum>(val));
        } else goto handle_unusual;
        continue;
      // int64 NID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.MarketEnum Market = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_market(static_cast<::tutorial::MarketEnum>(val));
        } else goto handle_unusual;
        continue;
      // string OrderID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.SimulatorTradeOrder.OrderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tutorial.KindEnum Kind = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::tutorial::KindEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulatorTradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.SimulatorTradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string TransactTime = 1;
  if (this->transacttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeOrder.TransactTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transacttime(), target);
  }

  // .tutorial.SideEnum Side = 2;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeOrder.Symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int32 OrderQty = 4;
  if (this->orderqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_orderqty(), target);
  }

  // double Price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // .tutorial.OrderTypeEnum OrderType = 6;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ordertype(), target);
  }

  // string TSEOrderType = 7;
  if (this->tseordertype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tseordertype().data(), static_cast<int>(this->_internal_tseordertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeOrder.TSEOrderType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tseordertype(), target);
  }

  // .tutorial.TimeInForceEnum TimeInForce = 8;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_timeinforce(), target);
  }

  // int64 NID = 9;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_nid(), target);
  }

  // .tutorial.MarketEnum Market = 10;
  if (this->market() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_market(), target);
  }

  // string OrderID = 11;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.SimulatorTradeOrder.OrderID");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_orderid(), target);
  }

  // .tutorial.KindEnum Kind = 12;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.SimulatorTradeOrder)
  return target;
}

size_t SimulatorTradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.SimulatorTradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TransactTime = 1;
  if (this->transacttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string TSEOrderType = 7;
  if (this->tseordertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tseordertype());
  }

  // string OrderID = 11;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .tutorial.SideEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // int32 OrderQty = 4;
  if (this->orderqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderqty());
  }

  // double Price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // .tutorial.OrderTypeEnum OrderType = 6;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  // .tutorial.TimeInForceEnum TimeInForce = 8;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // int64 NID = 9;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nid());
  }

  // .tutorial.MarketEnum Market = 10;
  if (this->market() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_market());
  }

  // .tutorial.KindEnum Kind = 12;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorTradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.SimulatorTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorTradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulatorTradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.SimulatorTradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.SimulatorTradeOrder)
    MergeFrom(*source);
  }
}

void SimulatorTradeOrder::MergeFrom(const SimulatorTradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.SimulatorTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transacttime().size() > 0) {

    transacttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transacttime_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.tseordertype().size() > 0) {

    tseordertype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tseordertype_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.orderqty() != 0) {
    _internal_set_orderqty(from._internal_orderqty());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.market() != 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void SimulatorTradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.SimulatorTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorTradeOrder::CopyFrom(const SimulatorTradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.SimulatorTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorTradeOrder::IsInitialized() const {
  return true;
}

void SimulatorTradeOrder::InternalSwap(SimulatorTradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tseordertype_.Swap(&other->tseordertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(side_, other->side_);
  swap(orderqty_, other->orderqty_);
  swap(price_, other->price_);
  swap(ordertype_, other->ordertype_);
  swap(timeinforce_, other->timeinforce_);
  swap(nid_, other->nid_);
  swap(market_, other->market_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorTradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::SimulatorTradeReply* Arena::CreateMaybeMessage< ::tutorial::SimulatorTradeReply >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::SimulatorTradeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::SimulatorTradeOrder* Arena::CreateMaybeMessage< ::tutorial::SimulatorTradeOrder >(Arena* arena) {
  return Arena::CreateInternal< ::tutorial::SimulatorTradeOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
